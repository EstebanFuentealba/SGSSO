﻿Ext.override(Ext.grid.feature.GroupingSummary, {
    collapseAll: function () {
        var self = this, view = self.view;
        view.el.query(self.eventSelector).forEach(function (group) {
            var group_body = Ext.fly(group.nextSibling, '_grouping');
            self.collapse(group_body);
        });
    },

    expandAll: function () {
        var self = this, view = self.view;
        view.el.query(self.eventSelector).forEach(function (group) {
            var group_body = Ext.fly(group.nextSibling, '_grouping');
            self.expand(group_body);
        });
    }
});
var rymoore = {}; rymoore.JSON = new function () { var useHasOwn = {}.hasOwnProperty ? true : false; var pad = function (a) { return a < 10 ? "0" + a : a }; var m = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }; var fixDate = function (a) { for (property in a) { var b = typeof a[property]; switch (b) { case "string": if (a[property].indexOf("/Date(") > -1) { var c = a[property].substring(6); c = c.substring(0, c.indexOf(")/")); a[property] = new Date(parseInt(c)) } break; case "object": fixDate(a[property]); break } } }; var encodeString = function (a) { if (/["\\\x00-\x1f]/.test(a)) { return '"' + a.replace(/([\x00-\x1f\\"])/g, function (a, b) { var c = m[b]; if (c) { return c } c = b.charCodeAt(); return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16) }) + '"' } return '"' + a + '"' }; var encodeArray = function (a) { var b = ["["], c, d, e = a.length, f; for (d = 0; d < e; d += 1) { f = a[d]; switch (typeof f) { case "undefined": case "function": case "unknown": break; default: if (c) { b.push(",") } b.push(f === null ? "null" : rymoore.JSON.encode(f)); c = true } } b.push("]"); return b.join("") }; var encodeDate = function (a) { var b = '"\\/Date(' + a.getTime() + ')\\/"'; return b }; this.encode = function (a) { if (typeof a == "undefined" || a === null) { return "null" } else { if (Ext.isArray(a)) { return encodeArray(a) } else { if (Ext.isDate(a)) { return encodeDate(a) } else { if (typeof a == "string") { return encodeString(a) } else { if (typeof a == "number") { return isFinite(a) ? String(a) : "null" } else { if (typeof a == "boolean") { return String(a) } else { var b = ["{"], c, d, e; for (d in a) { if (!useHasOwn || a.hasOwnProperty(d)) { e = a[d]; switch (typeof e) { case "undefined": case "function": case "unknown": break; default: if (c) { b.push(",") } b.push(this.encode(d), ":", e === null ? "null" : this.encode(e)); c = true } } } b.push("}"); return b.join("") } } } } } } }; this.decode = function (json) { var obj = json; var type = typeof json; if (type == "string") { if (json.indexOf("{") == 0) { obj = eval("(" + json + ")") } else { obj = eval("('" + json + "')") } } fixDate(obj); return obj }; this.fixObjectDates = function (a) { fixDate(a) }; this.convertDateToString = function (a) { return encodeDate(a) } }; Ext.JSON.encode = rymoore.JSON.encode;Ext.JSON.decode = rymoore.JSON.decode;
Ext.apply(Ext.form.field.VTypes, { rut: function (a, b) { if (!a) { return false } var c = function (a) { var b = a.toString().split("").reverse().join(""); for (var c = 0, d = 2, e = 0; c < b.length; c++, d == 7 ? d = 2 : d++) { e += parseInt(b.charAt(c)) * d } var f = 11 - e % 11; return f == 11 ? 0 : f == 10 ? "K" : f }; if (a.toString().indexOf("-") != -1) { var d = a.replace(/\./g, "").split("-"); if (c(d[0]) == d[1]) { return true } } return false }, rutText: "Rut debe ser válido con el formato: <ul><li>(XXXXXXXX-X)</li><li>(XX.XXX.XXX-X)</li><ul>", daterange: function (a, b) { var c = b.parseDate(a); if (!c) { return false } if (b.startDateField && (!this.dateRangeMax || c.getTime() != this.dateRangeMax.getTime())) { var d = b.up("form").down("#" + b.startDateField); d.setMaxValue(c); d.validate(); this.dateRangeMax = c } else if (b.endDateField && (!this.dateRangeMin || c.getTime() != this.dateRangeMin.getTime())) { var e = b.up("form").down("#" + b.endDateField); e.setMinValue(c); e.validate(); this.dateRangeMin = c } return true }, daterangeText: "La primera Fecha debe ser Menor a la Segunda" });